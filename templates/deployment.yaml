apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "todo.fullname" . }}
  labels:
    {{- include "todo.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "todo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "todo.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "todo.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - args:
        - -wait
        - tcp://todo-postgresql.default.svc.cluster.local:5432
        - -timeout
        - 600s
        image: jwilder/dockerize
        imagePullPolicy: Always
        name: waitfor
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: todo-secrets
                  key: SECRET_KEY
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: todo-secrets
                  key: DATABASE_NAME
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: todo-secrets
                  key: DATABASE_HOST
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: todo-secrets
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: todo-postgresql
                  key: postgresql-password
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
